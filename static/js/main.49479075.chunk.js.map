{"version":3,"sources":["logo.svg","components/Clock.jsx","components/CountdownForm.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","startTimer","timeInSeconds","clock","setInterval","setState","timeInSec","state","displayTime","formatTime","setTimeout","clearInterval","resetCount","seconds","minutes","Math","floor","this","className","React","Component","CountdownForm","e","preventDefault","secondsStr","refs","value","timeAdded","parseInt","onSetCountdownTime","ref","onSubmit","bind","type","placeholder","Countdown","count","val","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2LAAAA,EAAOC,QAAU,IAA0B,kC,4JC0D5BC,G,wDAvDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqBRC,WAAa,WAAO,IACVC,EAAkB,EAAKF,MAAvBE,cACR,EAAKC,MAAQC,aAAY,WACvB,EAAKC,SAAS,CACZC,UAAW,EAAKC,MAAMD,UAAY,EAClCE,YAAa,EAAKC,WAAW,EAAKF,MAAMD,UAAY,OAErD,KAEHI,YAAW,WACTC,cAAc,EAAKR,OACnB,EAAKH,MAAMY,eACY,KAArBV,EAAgB,KAhCpB,EAAKK,MAAQ,CACXC,YAAa,GACbF,UAAW,GAJI,E,uDAORJ,GACT,IAAIW,EAAUX,EAAgB,GAC1BY,EAAUC,KAAKC,MAAMd,EAAgB,IAUzC,OARIW,EAAU,KACZA,EAAU,IAAMA,GAGdC,EAAU,KACZA,EAAU,IAAMA,GAGXA,EAAU,IAAMD,I,0CAmBvBI,KAAKZ,SAAS,CAAEC,UAAWW,KAAKjB,MAAME,cAAgB,IAClDe,KAAKjB,MAAME,cAAgB,GAAGe,KAAKhB,e,+BAG/B,IAAD,EAC4BgB,KAAKV,MAAhCC,EADD,EACCA,YAAaF,EADd,EACcA,UAErB,OACE,yBAAKY,UAAU,yBACb,0BAAMA,UAAU,0BACC,IAAdZ,GAAmBE,Q,GAjDVW,IAAMC,YCmCXC,G,4KAlCJC,GAEPA,EAAEC,iBACF,IAAIC,EAAaP,KAAKQ,KAAKZ,QAAQa,MAC7BC,EAAYC,SAASJ,GACR,KAAfA,GAAqBG,EAAY,GACnCV,KAAKjB,MAAM6B,mBAAmBF,K,+BAIhC,OACE,6BACE,0BACEG,IAAI,OACJC,SAAUd,KAAKc,SAASC,KAAKf,MAC7BC,UAAU,4BAEV,2BACEe,KAAK,OACLH,IAAI,UACJI,YAAY,wBACZhB,UAAU,eAEZ,2BACEe,KAAK,SACLf,UAAU,uCACVQ,MAAM,0B,GA3BUP,IAAMC,YCgCnBe,E,kDA5Bb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAMRY,WAAa,WACX,EAAKP,SAAS,CAAE+B,MAAO,KANvB,EAAK7B,MAAQ,CACX6B,MAAO,GAHQ,E,qDAWT,IAAD,OACCA,EAAUnB,KAAKV,MAAf6B,MACR,OACE,yBAAKlB,UAAU,kBACF,IAAVkB,GACC,kBAAC,EAAD,CAAOlC,cAAekC,EAAOxB,WAAYK,KAAKL,aAEhD,kBAAC,EAAD,CACEiB,mBAAoB,SAACQ,GAAD,OACG,IAArB,EAAK9B,MAAM6B,OAAe,EAAK/B,SAAS,CAAE+B,MAAOC,Y,GArBrClB,IAAMC,WCOfkB,MARf,WACE,OACE,yBAAKpB,UAAU,OACd,kBAAC,EAAD,QCKeqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49479075.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\nimport \"./Clock.css\";\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayTime: \"\",\n      timeInSec: 0,\n    };\n  }\n  formatTime(timeInSeconds) {\n    var seconds = timeInSeconds % 60;\n    var minutes = Math.floor(timeInSeconds / 60);\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    return minutes + \":\" + seconds;\n  }\n\n  startTimer = () => {\n    const { timeInSeconds } = this.props;\n    this.clock = setInterval(() => {\n      this.setState({\n        timeInSec: this.state.timeInSec - 1,\n        displayTime: this.formatTime(this.state.timeInSec - 1),\n      });\n    }, 1000);\n\n    setTimeout(() => {\n      clearInterval(this.clock);\n      this.props.resetCount();\n    }, (timeInSeconds + 1) * 1000);\n  };\n\n  componentDidMount() {\n    this.setState({ timeInSec: this.props.timeInSeconds + 1 });\n    if (this.props.timeInSeconds > 0) this.startTimer();\n  }\n\n  render() {\n    const { displayTime, timeInSec } = this.state;\n    //Keep the classes name. Try to inject your code and do not remove existing code\n    return (\n      <div className='clock clock-container'>\n        <span className='clock-text clock-value'>\n          {timeInSec !== 0 && displayTime}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport \"./FormStyling.css\";\nclass CountdownForm extends React.Component {\n  onSubmit(e) {\n    //This will give you string for seconds. Do not remove refs\n    e.preventDefault();\n    var secondsStr = this.refs.seconds.value;\n    const timeAdded = parseInt(secondsStr);\n    if (secondsStr !== \"\" && timeAdded > 0)\n      this.props.onSetCountdownTime(timeAdded);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          ref='form'\n          onSubmit={this.onSubmit.bind(this)}\n          className='countdown-form form-body'\n        >\n          <input\n            type='text'\n            ref='seconds'\n            placeholder='Enter time in seconds'\n            className='enter-text'\n          />\n          <input\n            type='submit'\n            className='button success expanded timer-button'\n            value='Start Countdown'\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CountdownForm;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport CountdownForm from \"./CountdownForm\";\nimport \"./FormStyling.css\";\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  resetCount = () => {\n    this.setState({ count: 0 });\n  };\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div className='time-container'>\n        {count !== 0 && (\n          <Clock timeInSeconds={count} resetCount={this.resetCount} />\n        )}\n        <CountdownForm\n          onSetCountdownTime={(val) =>\n            this.state.count === 0 && this.setState({ count: val })\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Countdown from \"./components/Countdown\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Countdown></Countdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}